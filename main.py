import os
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
from datetime import datetime, timedelta
import pytz

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TZ = pytz.timezone("Europe/Kyiv")
MORNING_HOUR = 9
EVENING_HOUR = 21
USERNAME = "–ê—Ä—Ç—É—Ä"
CURRENCY = "$"
REPORT_XLSX = "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π_–º–∞—Ä–∞—Ñ–æ–Ω_300.xlsx"
REPORT_PNG = "–ì—Ä–∞—Ñ–∏–∫_–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π_–º–∞—Ä–∞—Ñ–æ–Ω_300.png"

# === –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ ===
def init_db():
    conn = sqlite3.connect("tracker.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS params (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            start_balance REAL,
            start_date TEXT,
            percent REAL,
            duration INTEGER
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS balances (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            day INTEGER,
            date TEXT,
            balance REAL,
            plan REAL,
            diff REAL
        )
    ''')
    conn.commit()
    conn.close()

# === –ö–û–ú–ê–ù–î–´ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("tracker.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM params")
    params = cursor.fetchone()
    conn.close()

    if params:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {USERNAME}! üëã\n"
            f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–∞—Ä–∞—Ñ–æ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω.\n"
            f"–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤—Ä—É—á–Ω—É—é\n"
            f"/stats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            f"/report ‚Äì –æ–±—â–∏–π –æ—Ç—á—ë—Ç\n"
            f"/export ‚Äì Excel –æ—Ç—á—ë—Ç\n"
            f"/reset ‚Äì —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        )
    else:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {USERNAME}! üëã\n"
            f"–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–∞—Ä–∞—Ñ–æ–Ω üí∞\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å ($):"
        )
        return 1  # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì –≤–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞
    return ConversationHandler.END

async def set_start_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        balance = float(update.message.text)
        context.user_data["start_balance"] = balance
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        return 2
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 300")
        return 1

async def set_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        start_date = datetime.strptime(update.message.text, "%Y-%m-%d")
        context.user_data["start_date"] = start_date.strftime("%Y-%m-%d")
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –¥–µ–Ω—å (%):")
        return 3
    except ValueError:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π —Ç–∞–∫: 2025-10-29")
        return 2

async def set_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        percent = float(update.message.text)
        context.user_data["percent"] = percent
        await update.message.reply_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –º–∞—Ä–∞—Ñ–æ–Ω?")
        return 4
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2")
        return 3

async def set_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        duration = int(update.message.text)
        context.user_data["duration"] = duration

        conn = sqlite3.connect("tracker.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM params")
        cursor.execute(
            "INSERT INTO params (start_balance, start_date, percent, duration) VALUES (?, ?, ?, ?)",
            (
                context.user_data["start_balance"],
                context.user_data["start_date"],
                context.user_data["percent"],
                context.user_data["duration"],
            ),
        )
        conn.commit()
        conn.close()

        await update.message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {USERNAME}!\n"
            f"–ë–∞–ª–∞–Ω—Å: {context.user_data['start_balance']}{CURRENCY}\n"
            f"–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {context.user_data['start_date']}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç: {context.user_data['percent']}%\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {context.user_data['duration']} –¥–Ω–µ–π\n\n"
            f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º –≤–≤–æ–¥–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n"
            f"–ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /add –∏–ª–∏ /stats –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 90")
        return 4
# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê ===

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê (–ê–í–¢–û–í–´–ß–ò–°–õ–ï–ù–ò–ï –î–ù–Ø) ===

async def add_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("tracker.db")
    cursor = conn.cursor()
    cursor.execute("SELECT start_balance, percent, start_date FROM params")
    row = cursor.fetchone()
    conn.close()

    if not row:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –º–∞—Ä–∞—Ñ–æ–Ω —á–µ—Ä–µ–∑ /start")
        return ConversationHandler.END

    start_balance, percent, start_date = row
    today = datetime.now(TZ).date()
    start_date_obj = datetime.strptime(start_date, "%Y-%m-%d").date()
    current_day = (today - start_date_obj).days + 1
    if current_day < 1:
        current_day = 1

    context.user_data["day"] = current_day
    context.user_data["date"] = str(today)
    context.user_data["start_balance"] = start_balance
    context.user_data["percent"] = percent

    await update.message.reply_text(
        f"üìÖ –î–µ–Ω—å {current_day} –º–∞—Ä–∞—Ñ–æ–Ω–∞ ({today})\n"
        f"–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å üíµ"
    )
    return 6


async def save_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        balance = float(update.message.text)
        conn = sqlite3.connect("tracker.db")
        cursor = conn.cursor()

        start_balance = context.user_data["start_balance"]
        percent = context.user_data["percent"]
        day = context.user_data["day"]
        date = context.user_data["date"]

        # —Ä–∞—Å—á—ë—Ç –ø–ª–∞–Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        plan_balance = start_balance * ((1 + percent / 100) ** day)
        diff = balance - plan_balance

        cursor.execute(
            "INSERT OR REPLACE INTO balances (day, date, balance, plan, diff) VALUES (?, ?, ?, ?, ?)",
            (day, date, balance, plan_balance, diff),
        )
        conn.commit()
        conn.close()

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if diff >= 0:
            msg = (f"‚úÖ –î–µ–Ω—å {day} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
                   f"–ü–ª–∞–Ω: {plan_balance:.2f}{CURRENCY}\n"
                   f"–§–∞–∫—Ç: {balance:.2f}{CURRENCY}\n"
                   f"–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: +{diff:.2f}{CURRENCY}")
        else:
            msg = (f"‚ö†Ô∏è –î–µ–Ω—å {day}: –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞\n"
                   f"–ü–ª–∞–Ω: {plan_balance:.2f}{CURRENCY}\n"
                   f"–§–∞–∫—Ç: {balance:.2f}{CURRENCY}\n"
                   f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {diff:.2f}{CURRENCY}")

        await update.message.reply_text(msg + "\n\n" + motivation(diff))
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 342.5")
        return 6

# === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===

async def ask_morning(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {USERNAME} ‚òÄÔ∏è\n–ö–∞–∫–æ–π —É —Ç–µ–±—è –±–∞–ª–∞–Ω—Å –Ω–∞ —É—Ç—Ä–æ?"
    )

async def ask_evening(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, {USERNAME} üåô\n–ö–∞–∫–æ–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?"
    )

def schedule_jobs(application, chat_id):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for job in application.job_queue.get_jobs_by_name(str(chat_id)):
        job.schedule_removal()

    # –î–æ–±–∞–≤–ª—è–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–π –∏ –≤–µ—á–µ—Ä–Ω–∏–π –∑–∞–ø—Ä–æ—Å
    kyiv_now = datetime.now(TZ)
    application.job_queue.run_daily(
        ask_morning,
        time=datetime.time(hour=MORNING_HOUR, minute=0, tzinfo=TZ),
        days=(0, 1, 2, 3, 4, 5, 6),
        name=str(chat_id),
        chat_id=chat_id,
    )
    application.job_queue.run_daily(
        ask_evening,
        time=datetime.time(hour=EVENING_HOUR, minute=0, tzinfo=TZ),
        days=(0, 1, 2, 3, 4, 5, 6),
        name=str(chat_id),
        chat_id=chat_id,
    )

# === –ù–ï–î–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("tracker.db")
    df = pd.read_sql_query("SELECT * FROM balances", conn)
    conn.close()

    if df.empty:
        await update.message.reply_text("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ /add")
        return

    df["date"] = pd.to_datetime(df["date"])
    last_day = df["date"].max()
    first_day = last_day - timedelta(days=6)
    week_data = df[(df["date"] >= first_day) & (df["date"] <= last_day)]

    msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é ({first_day.date()} - {last_day.date()}):\n\n"
    avg_diff = 0
    for _, row in week_data.iterrows():
        day_diff = row["balance"] - row["plan"]
        perc = (day_diff / row["plan"]) * 100
        avg_diff += perc
        msg += (f"–î–µ–Ω—å {int(row['day'])}: –ü–ª–∞–Ω {row['plan']:.2f}{CURRENCY} | "
                f"–§–∞–∫—Ç {row['balance']:.2f}{CURRENCY} | "
                f"{'+' if perc >= 0 else ''}{perc:.2f}%\n")

    avg_diff /= len(week_data)
    msg += f"\nüìà –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: {avg_diff:+.2f}%"
    await update.message.reply_text(msg)

# === –û–¢–ß–Å–¢ –ò –ì–†–ê–§–ò–ö ===
import matplotlib
matplotlib.use('Agg')

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("tracker.db")
    df = pd.read_sql_query("SELECT * FROM balances", conn)
    conn.close()

    if df.empty:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ üìÑ")
        return

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(10,5))
    plt.plot(df["day"], df["plan"], label="–ü–ª–∞–Ω", linestyle="--", color="blue")
    plt.plot(df["day"], df["balance"], label="–§–∞–∫—Ç", marker="o", color="green")
    plt.xlabel("–î–µ–Ω—å")
    plt.ylabel(f"–ë–∞–ª–∞–Ω—Å ({CURRENCY})")
    plt.title(f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –º–∞—Ä–∞—Ñ–æ–Ω ‚Äî {USERNAME}")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.savefig(REPORT_PNG)
    plt.close()

    await update.message.reply_photo(photo=open(REPORT_PNG, "rb"), caption="üìà –ì—Ä–∞—Ñ–∏–∫ —Ç–≤–æ–µ–≥–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞")

    # –≠–∫—Å–ø–æ—Ä—Ç Excel
    writer = pd.ExcelWriter(REPORT_XLSX, engine="openpyxl")
    df.to_excel(writer, index=False, sheet_name="–ú–∞—Ä–∞—Ñ–æ–Ω")
    writer.close()

    await update.message.reply_document(document=open(REPORT_XLSX, "rb"), caption="üìÑ –û—Ç—á—ë—Ç Excel –≥–æ—Ç–æ–≤!")

# === –°–ë–†–û–° –î–ê–ù–ù–´–• ===
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("tracker.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM params")
    cursor.execute("DELETE FROM balances")
    conn.commit()
    conn.close()
    await update.message.reply_text("üîÅ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –≤–≤–µ–¥–∏ /start")

# === –ú–û–¢–ò–í–ê–¶–ò–Ø ===
def motivation(diff):
    if diff > 0:
        return "üî• –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    elif diff > -1:
        return "‚ö° –ü–æ—á—Ç–∏ –≤ –ø–ª–∞–Ω–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–π!"
    else:
        return "üí™ –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ!"

# === –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö ===
import asyncio

async def main():
    init_db()
    token = os.environ.get("BOT_TOKEN")
    if not token:
        print("‚ùå –£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º: $env:BOT_TOKEN='...'")
        return

    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        1: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_start_balance)],
        2: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_start_date)],
        3: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_percent)],
        4: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_duration)],
        6: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_balance)],
    },
    fallbacks=[],
)

    app.add_handler(conv_handler)

# –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–∏–Ω–∏-–¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    add_conv = ConversationHandler(
    entry_points=[CommandHandler("add", add_balance)],
    states={
        6: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_balance)],
    },
    fallbacks=[],
)

    app.add_handler(add_conv)    
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("export", report))
    app.add_handler(CommandHandler("reset", reset))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏ –µ–º—É /start –≤ Telegram.")

    # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Python 3.14
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()  # –¥–µ—Ä–∂–∏–º —Ü–∏–∫–ª –æ—Ç–∫—Ä—ã—Ç—ã–º

if __name__ == "__main__":
    asyncio.run(main())
